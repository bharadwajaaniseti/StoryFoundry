import { createSupabaseServer, requireAuth } from '@/lib/auth-server'
import { handleApiError, formatDate } from '@/lib/utils'
import { NextRequest } from 'next/server'
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib'

export async function GET(request: NextRequest) {
  try {
    // Require authentication
    const user = await requireAuth()

    const { searchParams } = new URL(request.url)
    const projectId = searchParams.get('project_id')

    if (!projectId) {
      return Response.json(
        { error: 'project_id parameter is required' },
        { status: 400 }
      )
    }

    const supabase = await createSupabaseServer()

    // Get project details and verify ownership
    const { data: project, error: projectError } = await supabase
      .from('projects')
      .select('title, owner_id, created_at')
      .eq('id', projectId)
      .single()

    if (projectError || !project) {
      return Response.json(
        { error: 'Project not found' },
        { status: 404 }
      )
    }

    if (project.owner_id !== user.id) {
      return Response.json(
        { error: 'Access denied: not project owner' },
        { status: 403 }
      )
    }

    // Get latest IP timestamp for the project
    const { data: timestamp, error: timestampError } = await supabase
      .from('ip_timestamps')
      .select('content_hash, created_at, provider')
      .eq('project_id', projectId)
      .order('created_at', { ascending: false })
      .limit(1)
      .single()

    if (timestampError || !timestamp) {
      return Response.json(
        { error: 'No IP timestamp found for this project' },
        { status: 404 }
      )
    }

    // Create PDF certificate
    const pdfDoc = await PDFDocument.create()
    const page = pdfDoc.addPage([612, 792]) // Standard letter size
    const { width, height } = page.getSize()

    // Load fonts
    const titleFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold)
    const bodyFont = await pdfDoc.embedFont(StandardFonts.Helvetica)
    const monoFont = await pdfDoc.embedFont(StandardFonts.Courier)

    // Colors
    const primaryColor = rgb(0.2, 0.08, 0.4) // Brand navy
    const goldColor = rgb(0.75, 0.65, 0.1) // Brand gold
    const grayColor = rgb(0.3, 0.3, 0.3)

    // Header
    page.drawText('INTELLECTUAL PROPERTY CERTIFICATE', {
      x: 50,
      y: height - 80,
      size: 24,
      font: titleFont,
      color: primaryColor,
    })

    page.drawText('StoryFoundry Platform', {
      x: 50,
      y: height - 110,
      size: 14,
      font: bodyFont,
      color: goldColor,
    })

    // Certificate content
    const contentY = height - 180
    let currentY = contentY

    page.drawText('This certificate verifies the intellectual property timestamp for:', {
      x: 50,
      y: currentY,
      size: 12,
      font: bodyFont,
      color: grayColor,
    })

    currentY -= 40
    page.drawText(`Project Title: ${project.title}`, {
      x: 50,
      y: currentY,
      size: 14,
      font: titleFont,
      color: primaryColor,
    })

    currentY -= 30
    page.drawText(`Project Created: ${formatDate(project.created_at)}`, {
      x: 50,
      y: currentY,
      size: 12,
      font: bodyFont,
      color: grayColor,
    })

    currentY -= 30
    page.drawText(`Timestamp Created: ${formatDate(timestamp.created_at)}`, {
      x: 50,
      y: currentY,
      size: 12,
      font: bodyFont,
      color: grayColor,
    })

    currentY -= 30
    page.drawText('Content Hash (SHA-256):', {
      x: 50,
      y: currentY,
      size: 12,
      font: bodyFont,
      color: grayColor,
    })

    currentY -= 20
    page.drawText(timestamp.content_hash, {
      x: 50,
      y: currentY,
      size: 10,
      font: monoFont,
      color: primaryColor,
    })

    currentY -= 40
    page.drawText(`Timestamp Provider: ${timestamp.provider}`, {
      x: 50,
      y: currentY,
      size: 12,
      font: bodyFont,
      color: grayColor,
    })

    // Footer
    page.drawText('This certificate serves as proof that the content existed at the specified timestamp.', {
      x: 50,
      y: 120,
      size: 10,
      font: bodyFont,
      color: grayColor,
    })

    page.drawText('Generated by StoryFoundry - https://storyfoundry.com', {
      x: 50,
      y: 100,
      size: 10,
      font: bodyFont,
      color: grayColor,
    })

    page.drawText(`Generated on: ${formatDate(new Date())}`, {
      x: 50,
      y: 80,
      size: 10,
      font: bodyFont,
      color: grayColor,
    })

    // Generate PDF buffer
    const pdfBytes = await pdfDoc.save()

    // Return PDF as download
    const filename = `${project.title.replace(/[^a-zA-Z0-9]/g, '_')}_IP_Certificate.pdf`

    return new Response(new Uint8Array(pdfBytes), {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': pdfBytes.length.toString(),
      },
    })

  } catch (error) {
    return handleApiError(error)
  }
}
