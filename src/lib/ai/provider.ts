import { env } from '../env'

export interface LoglineResponse {
  loglines: string[]
  reasoning?: string
}

export interface CoverageResponse {
  summary: string
  strengths: string[]
  areas_for_improvement: string[]
  genre_fit: string
  marketability: string
  overall_score: number // 1-10
}

export interface AiProvider {
  generateLoglines(
    text: string, 
    genre?: string, 
    format?: string
  ): Promise<LoglineResponse>
  
  generateCoverage(text: string): Promise<CoverageResponse>
}

// Mock provider for development and fallback
class MockAiProvider implements AiProvider {
  async generateLoglines(
    text: string, 
    genre?: string, 
    format?: string
  ): Promise<LoglineResponse> {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    const baseLogline = "A compelling story unfolds"
    const genrePrefix = genre ? `In this ${genre.toLowerCase()} ${format || 'story'}, ` : ""
    
    return {
      loglines: [
        `${genrePrefix}${baseLogline} as characters face impossible choices.`,
        `${genrePrefix}${baseLogline} revealing hidden truths about human nature.`,
        `${genrePrefix}${baseLogline} with unexpected consequences that change everything.`
      ],
      reasoning: "Generated using mock AI provider for development purposes."
    }
  }

  async generateCoverage(text: string): Promise<CoverageResponse> {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1500))
    
    return {
      summary: "This is a compelling story that explores universal themes with well-developed characters and engaging plot progression. The narrative demonstrates strong potential for audience engagement.",
      strengths: [
        "Clear character motivations and development",
        "Engaging plot structure",
        "Strong thematic elements",
        "Authentic dialogue"
      ],
      areas_for_improvement: [
        "Consider strengthening the opening hook",
        "Some pacing adjustments might enhance tension",
        "Character backstories could be expanded"
      ],
      genre_fit: "Well-suited to its intended genre with appropriate tone and conventions",
      marketability: "Shows strong commercial potential with broad audience appeal",
      overall_score: 7.5
    }
  }
}

// OpenAI provider
class OpenAIProvider implements AiProvider {
  private apiKey: string

  constructor(apiKey: string) {
    this.apiKey = apiKey
  }

  async generateLoglines(
    text: string, 
    genre?: string, 
    format?: string
  ): Promise<LoglineResponse> {
    const prompt = `
You are a professional script analyst. Based on the following ${format || 'story'} excerpt, generate 3 improved loglines that are concise, compelling, and marketable.

${genre ? `Genre: ${genre}` : ''}
${format ? `Format: ${format}` : ''}

Text excerpt:
${text.substring(0, 2000)}

Generate 3 loglines that:
1. Are 1-2 sentences max
2. Include the protagonist, conflict, and stakes
3. Are compelling and marketable
4. Fit the genre and format

Return as JSON with "loglines" array and optional "reasoning" string.
`

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
          max_tokens: 500,
        }),
      })

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.statusText}`)
      }

      const data = await response.json()
      const content = data.choices[0]?.message?.content

      try {
        return JSON.parse(content)
      } catch {
        // Fallback if JSON parsing fails
        return {
          loglines: [content || "Unable to generate loglines"],
          reasoning: "Generated by OpenAI GPT-4"
        }
      }
    } catch (error) {
      console.error('OpenAI error:', error)
      throw new Error('Failed to generate loglines')
    }
  }

  async generateCoverage(text: string): Promise<CoverageResponse> {
    const prompt = `
You are a professional script coverage analyst. Provide detailed coverage analysis for the following text.

Text:
${text.substring(0, 4000)}

Analyze and provide:
1. Summary (2-3 sentences)
2. Strengths (3-5 points)
3. Areas for improvement (3-5 points)
4. Genre fit assessment
5. Marketability assessment
6. Overall score (1-10)

Return as JSON with fields: summary, strengths, areas_for_improvement, genre_fit, marketability, overall_score
`

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.3,
          max_tokens: 1000,
        }),
      })

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.statusText}`)
      }

      const data = await response.json()
      const content = data.choices[0]?.message?.content

      return JSON.parse(content)
    } catch (error) {
      console.error('OpenAI coverage error:', error)
      throw new Error('Failed to generate coverage')
    }
  }
}

// Factory function to get the appropriate provider
export function createAiProvider(): AiProvider {
  switch (env.AI_PROVIDER) {
    case 'openai':
      if (!env.OPENAI_API_KEY) {
        console.warn('OpenAI API key not configured, falling back to mock provider')
        return new MockAiProvider()
      }
      return new OpenAIProvider(env.OPENAI_API_KEY)
    
    case 'anthropic':
      // TODO: Implement Anthropic provider
      console.warn('Anthropic provider not yet implemented, falling back to mock')
      return new MockAiProvider()
    
    case 'deepseek':
      // TODO: Implement DeepSeek provider
      console.warn('DeepSeek provider not yet implemented, falling back to mock')
      return new MockAiProvider()
    
    case 'mock':
    default:
      return new MockAiProvider()
  }
}
